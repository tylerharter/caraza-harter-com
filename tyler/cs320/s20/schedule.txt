################################################################################
# PART 1
################################################################################

Martin Luther King Day!<br>
<b>No Class</b><br>
<a href="https://github.com/tylerharter/cs320/blob/master/s20/lab1/README.md">WEEKLY LAB: Cloud Setup</a><br>

=
Reproducibility 1
* Course Overview
* Hardware, OS, Interpreters
<a href="materials/lec-01.pdf">SLIDES</a><br>
<b>Read</b>: <a href="syllabus.html">Syllabus</a><br>

=
Reproducibility 2
* versioning
* git
<a href="materials/lec-02.pdf">SLIDES</a><br>
<a href="https://mediaspace.wisc.edu/media/Tyler+Caraza-Harter-+Noland132+1.24.2020+09.54.47AM/1_sv9nj3ue">VIDEO</a><br>
<b>Read</b>: <a href="https://product.hubspot.com/blog/git-and-github-tutorial-for-beginners">Git Tutorial</a><br>

=
Quantifying Perf 1
* check_output
* time
<a href="lectures/lec3-morning.ipynb">LECTURE NB</a><br>
<a href="https://mediaspace.wisc.edu/media/%5BAUDIO%2C+NO+VIDEO%5D+Tyler+Caraza-Harter-+SocialScience5206+1.27.2020+2.25.14PM/0_kbpblqaf">AUDIO (NO VIDEO)</a><br>
<b>Read</b>: <a href="reading/lec3-measuring-perf.html">HTML</a>, <a href="reading/lec3-measuring-perf.ipynb">NB</a><br>
<a href="https://github.com/tylerharter/cs320/blob/master/s20/lab2/README.md">WEEKLY LAB: Git Practice</a><br>

=
Quantifying Perf 2
* complexity analysis
* Big O
<a href="lectures/lec4-big-o-start.ipynb">LECTURE NB STARTER</a><br>
<a href="materials/lec-04.pdf">SLIDES</a><br>
<a href="https://mediaspace.wisc.edu/media/Tyler+Caraza-Harter-+SocialScience5206+1.29.2020+2.25.10PM/0_9cly8bcl">VIDEO</a><br>
<b>Read</b>: <a href="http://greenteapress.com/thinkpython2/html/thinkpython2022.html">Think Python Appendix B (except B.4)</a><br>
<b>Released:</b> <a href="https://github.com/tylerharter/cs320/tree/master/s20/p1">P1</a><br>

=
Quantifying Perf 3
* practice
<a href="materials/lec-05-worksheet.key.pdf">WORKSHEET</a><br>
<a href="materials/lec-05-worksheet-answers.key.pdf">ANSWERS</a><br>
<a href="lectures/lec5-examples.ipynb">NOTEBOOK</a><br>
<a href="materials/lec-05.html">EXAMPLES</a><br>
<a href="https://mediaspace.wisc.edu/media/Tyler+Caraza-Harter-+SocialScience5206+1.31.2020+2.25.11PM/0_65ioa21k">VIDEO</a><br>

=
OOP 1: Classes
* attributes
* methods
* constructors
<a href="lectures/lec6-classes.ipynb">NOTEBOOK</a><br>
<a href="materials/lec-06.pdf">SLIDES</a><br>
<a href="https://mediaspace.wisc.edu/media/Tyler+Caraza-Harter-+SocialScience5206+2.3.2020+2.25.08PM/1_9fehf8zg">VIDEO</a><br>
<b>Read</b>: <a href="https://greenteapress.com/wp/think-python-2e/">Think Python 15 + 17.1 - 17.5</a><br>
<b>Optional</b>: <a href="https://greenteapress.com/wp/think-python-2e/">Think Python 16</a><br>
<a href="https://github.com/tylerharter/cs320/blob/master/s20/lab3/README.md">WEEKLY LAB: Complexity</a><br>

=
OOP 2: <span style="font-size:90%">Special Methods</span>
* __str__, __repr__, _repr_html_
* __eq__, __lt__
* __len__, __getitem__
* __enter__, __exit__
<a href="lectures/lec7-special-methods.ipynb">NOTEBOOK</a><br>
<a href="materials/lec-07.pdf">SLIDES</a><br>
<a href="https://mediaspace.wisc.edu/media/Tyler+Caraza-Harter-+SocialScience5206+2.5.2020+2.25.18PM/0_z0m46x2n">VIDEO</a><br>
<a href="lectures/lec7-tests.txt">TEST CASES</a><br>
<b>Read</b>: <a href="https://greenteapress.com/wp/think-python-2e/">Think Python 17.6 - 17.12</a><br>
<b>Optional</b>: <a href="https://docs.python.org/3/reference/datamodel.html">Python Data Model</a><br>

=
OOP 3: Inheritance
* method resolution order
* overriding methods
* calling overridden methods
<a href="lectures/lec8-inheritance-start.ipynb">LECTURE NB STARTER</a><br>
<a href="lectures/lec8-inheritance-examples.ipynb">NOTEBOOK</a><br>
<a href="materials/lec-08.pdf">SLIDES</a><br>
<a href="https://mediaspace.wisc.edu/media/Tyler+Caraza-Harter-+SocialScience5206+2.7.2020+2.25.11PM/0_2sqk0ukr">VIDEO</a><br>
<b>Read</b>: <a href="https://greenteapress.com/wp/think-python-2e/">Think Python 18</a><br>

=
Review + Practice
* Inheritance
* Recursion
<a href="materials/lec-09-worksheet.key.pdf">WORKSHEET</a><br>

=
Trees 1
* review recursion
* build, print trees
<b>Due:</b> P1<br>
=
Trees 2
* trees as a lookup structure
* point lookup vs. range query
=
Graphs 1
* directed vs. non-directed
* dense numpy implementation
* sparse implementation via classes
* build from data
* introduce graphviz, visualize
=
Graphs 2
* DFS and BFS search
* time vs. memory complexity
=
Graphs 3
* Markov chains
* log probability of sequence
=
Regex 1
* extract more features of 
* https://docs.python.org/3/howto/regex.html
* https://regex101.com/
=
Regex 2
* worksheet
<b>Due:</b> P2<br>
=
Web 1: Flask
* review from CS 220
* RPC, POST
* decorators
=
Web 2: Tracing
* wrappers based on *args and **kwargs
=
Web 3: Selenium
* simulating users
* advanced web scraping
=
Web 4: Markov chains
* construct from traces
* visualize
=
Web 4: A/B testing
* data collection
* significance
=
Review/Exam
<b>Due:</b> P3<br>
=
Visualization 1
* custom designs
* drawing polygons, etc
=
Spring Break!
<b>No Class</b>
=
Spring Break!
<b>No Class</b>
=
Spring Break!
<b>No Class</b>
=
Visualization 2
* plotting variation
* bar and whiskers
* CDFs
=
Visualization 3
* geographic maps
=
Visualization 4
* animations
=
Linear Algebra 1
* matrix multiplication basics
* numpy
=
Linear Algebra 2
* equation solving
<b>Due:</b> P4<br>
=
Linear Algebra 3
* fit lines
* loss function
* multiple linear regression
=
Linear Algebra 4
* transforming non-linear data
#https://www.khanacademy.org/math/ap-statistics/inference-slope-linear-regression/transformations-for-linearity/v/transforming-nonlinear-data
=
Linear Algebra 5
* principal component analysis
* TSNE (visualization)
=
Parallelism 1
* multiprocessing pools
* parallel map
=
Parallelism 2
* pytorch
=
Parallelism 3
* pytorch
<b>Due:</b> P5<br>
=
Supervised Learning 1
* TODO
=
Supervised Learning 2
* TODO
=
Supervised Learning 3
* TODO
=
Unsupervised Learning 1
* k-means
=
Unsupervised Learning 2
* hierarchical
=
Unsupervised Learning 3
* visualization
<b>Due:</b> P6<br>
=
Review For Final
